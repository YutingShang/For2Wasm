#include "Fortran90ContextCopy.h"

// NOTE : Most of this file was auto-generated by ChatGPT, for the 350 rules in parser->getRuleNames()

antlr4::ParserRuleContext *Fortran90ContextCopy::copyNode(antlr4::ParserRuleContext *nodeToCopy)
{
    antlr4::ParserRuleContext *newNode = nullptr;

    if (auto *programNode = dynamic_cast<Fortran90Parser::ProgramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ProgramContext(nullptr, programNode->invokingState);
    }

    else if (auto *executableProgramNode = dynamic_cast<Fortran90Parser::ExecutableProgramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExecutableProgramContext(nullptr, executableProgramNode->invokingState);
    }

    else if (auto *programUnitNode = dynamic_cast<Fortran90Parser::ProgramUnitContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ProgramUnitContext(nullptr, programUnitNode->invokingState);
    }

    else if (auto *mainProgramNode = dynamic_cast<Fortran90Parser::MainProgramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::MainProgramContext(nullptr, mainProgramNode->invokingState);
    }

    else if (auto *programStmtNode = dynamic_cast<Fortran90Parser::ProgramStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ProgramStmtContext(nullptr, programStmtNode->invokingState);
    }

    else if (auto *mainRangeNode = dynamic_cast<Fortran90Parser::MainRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::MainRangeContext(nullptr, mainRangeNode->invokingState);
    }

    else if (auto *bodyPlusInternalsNode = dynamic_cast<Fortran90Parser::BodyPlusInternalsContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BodyPlusInternalsContext(nullptr, bodyPlusInternalsNode->invokingState);
    }

    else if (auto *internalSubprogramNode = dynamic_cast<Fortran90Parser::InternalSubprogramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InternalSubprogramContext(nullptr, internalSubprogramNode->invokingState);
    }

    else if (auto *specificationPartConstructNode = dynamic_cast<Fortran90Parser::SpecificationPartConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SpecificationPartConstructContext(nullptr, specificationPartConstructNode->invokingState);
    }

    else if (auto *useStmtNode = dynamic_cast<Fortran90Parser::UseStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UseStmtContext(nullptr, useStmtNode->invokingState);
    }

    else if (auto *onlyListNode = dynamic_cast<Fortran90Parser::OnlyListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OnlyListContext(nullptr, onlyListNode->invokingState);
    }

    else if (auto *onlyStmtNode = dynamic_cast<Fortran90Parser::OnlyStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OnlyStmtContext(nullptr, onlyStmtNode->invokingState);
    }

    else if (auto *renameListNode = dynamic_cast<Fortran90Parser::RenameListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RenameListContext(nullptr, renameListNode->invokingState);
    }

    else if (auto *renameNode = dynamic_cast<Fortran90Parser::RenameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RenameContext(nullptr, renameNode->invokingState);
    }

    else if (auto *useNameNode = dynamic_cast<Fortran90Parser::UseNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UseNameContext(nullptr, useNameNode->invokingState);
    }

    else if (auto *parameterStmtNode = dynamic_cast<Fortran90Parser::ParameterStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ParameterStmtContext(nullptr, parameterStmtNode->invokingState);
    }

    else if (auto *namedConstantDefListNode = dynamic_cast<Fortran90Parser::NamedConstantDefListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamedConstantDefListContext(nullptr, namedConstantDefListNode->invokingState);
    }

    else if (auto *namedConstantDefNode = dynamic_cast<Fortran90Parser::NamedConstantDefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamedConstantDefContext(nullptr, namedConstantDefNode->invokingState);
    }

    else if (auto *endProgramStmtNode = dynamic_cast<Fortran90Parser::EndProgramStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndProgramStmtContext(nullptr, endProgramStmtNode->invokingState);
    }

    else if (auto *blockDataSubprogramNode = dynamic_cast<Fortran90Parser::BlockDataSubprogramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BlockDataSubprogramContext(nullptr, blockDataSubprogramNode->invokingState);
    }

    else if (auto *blockDataStmtNode = dynamic_cast<Fortran90Parser::BlockDataStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BlockDataStmtContext(nullptr, blockDataStmtNode->invokingState);
    }

    else if (auto *blockDataBodyNode = dynamic_cast<Fortran90Parser::BlockDataBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BlockDataBodyContext(nullptr, blockDataBodyNode->invokingState);
    }

    else if (auto *blockDataBodyConstructNode = dynamic_cast<Fortran90Parser::BlockDataBodyConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BlockDataBodyConstructContext(nullptr, blockDataBodyConstructNode->invokingState);
    }

    else if (auto *endBlockDataStmtNode = dynamic_cast<Fortran90Parser::EndBlockDataStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndBlockDataStmtContext(nullptr, endBlockDataStmtNode->invokingState);
    }

    else if (auto *formatStmtNode = dynamic_cast<Fortran90Parser::FormatStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FormatStmtContext(nullptr, formatStmtNode->invokingState);
    }

    else if (auto *fmtSpecNode = dynamic_cast<Fortran90Parser::FmtSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FmtSpecContext(nullptr, fmtSpecNode->invokingState);
    }

    else if (auto *formateditNode = dynamic_cast<Fortran90Parser::FormateditContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FormateditContext(nullptr, formateditNode->invokingState);
    }

    else if (auto *editElementNode = dynamic_cast<Fortran90Parser::EditElementContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EditElementContext(nullptr, editElementNode->invokingState);
    }

    else if (auto *mislexedFconNode = dynamic_cast<Fortran90Parser::MislexedFconContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::MislexedFconContext(nullptr, mislexedFconNode->invokingState);
    }

    else if (auto *moduleNode = dynamic_cast<Fortran90Parser::ModuleContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleContext(nullptr, moduleNode->invokingState);
    }

    else if (auto *endModuleStmtNode = dynamic_cast<Fortran90Parser::EndModuleStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndModuleStmtContext(nullptr, endModuleStmtNode->invokingState);
    }

    else if (auto *entryStmtNode = dynamic_cast<Fortran90Parser::EntryStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EntryStmtContext(nullptr, entryStmtNode->invokingState);
    }

    else if (auto *subroutineParListNode = dynamic_cast<Fortran90Parser::SubroutineParListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineParListContext(nullptr, subroutineParListNode->invokingState);
    }

    else if (auto *subroutineParsNode = dynamic_cast<Fortran90Parser::SubroutineParsContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineParsContext(nullptr, subroutineParsNode->invokingState);
    }

    else if (auto *subroutineParNode = dynamic_cast<Fortran90Parser::SubroutineParContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineParContext(nullptr, subroutineParNode->invokingState);
    }

    else if (auto *declarationConstructNode = dynamic_cast<Fortran90Parser::DeclarationConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DeclarationConstructContext(nullptr, declarationConstructNode->invokingState);
    }

    else if (auto *specificationStmtNode = dynamic_cast<Fortran90Parser::SpecificationStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SpecificationStmtContext(nullptr, specificationStmtNode->invokingState);
    }

    else if (auto *targetStmtNode = dynamic_cast<Fortran90Parser::TargetStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TargetStmtContext(nullptr, targetStmtNode->invokingState);
    }

    else if (auto *targetObjectListNode = dynamic_cast<Fortran90Parser::TargetObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TargetObjectListContext(nullptr, targetObjectListNode->invokingState);
    }

    else if (auto *targetObjectNode = dynamic_cast<Fortran90Parser::TargetObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TargetObjectContext(nullptr, targetObjectNode->invokingState);
    }

    else if (auto *pointerStmtNode = dynamic_cast<Fortran90Parser::PointerStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerStmtContext(nullptr, pointerStmtNode->invokingState);
    }

    else if (auto *pointerStmtObjectListNode = dynamic_cast<Fortran90Parser::PointerStmtObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerStmtObjectListContext(nullptr, pointerStmtObjectListNode->invokingState);
    }

    else if (auto *pointerStmtObjectNode = dynamic_cast<Fortran90Parser::PointerStmtObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerStmtObjectContext(nullptr, pointerStmtObjectNode->invokingState);
    }

    else if (auto *optionalStmtNode = dynamic_cast<Fortran90Parser::OptionalStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OptionalStmtContext(nullptr, optionalStmtNode->invokingState);
    }

    else if (auto *optionalParListNode = dynamic_cast<Fortran90Parser::OptionalParListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OptionalParListContext(nullptr, optionalParListNode->invokingState);
    }

    else if (auto *optionalParNode = dynamic_cast<Fortran90Parser::OptionalParContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OptionalParContext(nullptr, optionalParNode->invokingState);
    }

    else if (auto *namelistStmtNode = dynamic_cast<Fortran90Parser::NamelistStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamelistStmtContext(nullptr, namelistStmtNode->invokingState);
    }

    else if (auto *namelistGroupsNode = dynamic_cast<Fortran90Parser::NamelistGroupsContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamelistGroupsContext(nullptr, namelistGroupsNode->invokingState);
    }

    else if (auto *namelistGroupNameNode = dynamic_cast<Fortran90Parser::NamelistGroupNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamelistGroupNameContext(nullptr, namelistGroupNameNode->invokingState);
    }

    else if (auto *namelistGroupObjectNode = dynamic_cast<Fortran90Parser::NamelistGroupObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamelistGroupObjectContext(nullptr, namelistGroupObjectNode->invokingState);
    }

    else if (auto *intentStmtNode = dynamic_cast<Fortran90Parser::IntentStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntentStmtContext(nullptr, intentStmtNode->invokingState);
    }

    else if (auto *intentParListNode = dynamic_cast<Fortran90Parser::IntentParListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntentParListContext(nullptr, intentParListNode->invokingState);
    }

    else if (auto *intentParNode = dynamic_cast<Fortran90Parser::IntentParContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntentParContext(nullptr, intentParNode->invokingState);
    }

    else if (auto *dummyArgNameNode = dynamic_cast<Fortran90Parser::DummyArgNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DummyArgNameContext(nullptr, dummyArgNameNode->invokingState);
    }

    else if (auto *intentSpecNode = dynamic_cast<Fortran90Parser::IntentSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntentSpecContext(nullptr, intentSpecNode->invokingState);
    }

    else if (auto *allocatableStmtNode = dynamic_cast<Fortran90Parser::AllocatableStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocatableStmtContext(nullptr, allocatableStmtNode->invokingState);
    }

    else if (auto *arrayAllocationListNode = dynamic_cast<Fortran90Parser::ArrayAllocationListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayAllocationListContext(nullptr, arrayAllocationListNode->invokingState);
    }

    else if (auto *arrayAllocationNode = dynamic_cast<Fortran90Parser::ArrayAllocationContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayAllocationContext(nullptr, arrayAllocationNode->invokingState);
    }

    else if (auto *arrayNameNode = dynamic_cast<Fortran90Parser::ArrayNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayNameContext(nullptr, arrayNameNode->invokingState);
    }

    else if (auto *accessStmtNode = dynamic_cast<Fortran90Parser::AccessStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AccessStmtContext(nullptr, accessStmtNode->invokingState);
    }

    else if (auto *accessIdListNode = dynamic_cast<Fortran90Parser::AccessIdListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AccessIdListContext(nullptr, accessIdListNode->invokingState);
    }

    else if (auto *accessIdNode = dynamic_cast<Fortran90Parser::AccessIdContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AccessIdContext(nullptr, accessIdNode->invokingState);
    }

    else if (auto *genericNameNode = dynamic_cast<Fortran90Parser::GenericNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::GenericNameContext(nullptr, genericNameNode->invokingState);
    }

    else if (auto *saveStmtNode = dynamic_cast<Fortran90Parser::SaveStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SaveStmtContext(nullptr, saveStmtNode->invokingState);
    }

    else if (auto *savedEntityListNode = dynamic_cast<Fortran90Parser::SavedEntityListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SavedEntityListContext(nullptr, savedEntityListNode->invokingState);
    }

    else if (auto *savedEntityNode = dynamic_cast<Fortran90Parser::SavedEntityContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SavedEntityContext(nullptr, savedEntityNode->invokingState);
    }

    else if (auto *savedCommonBlockNode = dynamic_cast<Fortran90Parser::SavedCommonBlockContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SavedCommonBlockContext(nullptr, savedCommonBlockNode->invokingState);
    }

    else if (auto *intrinsicStmtNode = dynamic_cast<Fortran90Parser::IntrinsicStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntrinsicStmtContext(nullptr, intrinsicStmtNode->invokingState);
    }

    else if (auto *intrinsicListNode = dynamic_cast<Fortran90Parser::IntrinsicListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntrinsicListContext(nullptr, intrinsicListNode->invokingState);
    }

    else if (auto *intrinsicProcedureNameNode = dynamic_cast<Fortran90Parser::IntrinsicProcedureNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IntrinsicProcedureNameContext(nullptr, intrinsicProcedureNameNode->invokingState);
    }

    else if (auto *externalStmtNode = dynamic_cast<Fortran90Parser::ExternalStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExternalStmtContext(nullptr, externalStmtNode->invokingState);
    }

    else if (auto *externalNameListNode = dynamic_cast<Fortran90Parser::ExternalNameListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExternalNameListContext(nullptr, externalNameListNode->invokingState);
    }

    else if (auto *externalNameNode = dynamic_cast<Fortran90Parser::ExternalNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExternalNameContext(nullptr, externalNameNode->invokingState);
    }

    else if (auto *equivalenceStmtNode = dynamic_cast<Fortran90Parser::EquivalenceStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivalenceStmtContext(nullptr, equivalenceStmtNode->invokingState);
    }

    else if (auto *equivalenceSetListNode = dynamic_cast<Fortran90Parser::EquivalenceSetListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivalenceSetListContext(nullptr, equivalenceSetListNode->invokingState);
    }

    else if (auto *equivalenceSetNode = dynamic_cast<Fortran90Parser::EquivalenceSetContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivalenceSetContext(nullptr, equivalenceSetNode->invokingState);
    }

    else if (auto *equivalenceObjectNode = dynamic_cast<Fortran90Parser::EquivalenceObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivalenceObjectContext(nullptr, equivalenceObjectNode->invokingState);
    }

    else if (auto *equivalenceObjectListNode = dynamic_cast<Fortran90Parser::EquivalenceObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivalenceObjectListContext(nullptr, equivalenceObjectListNode->invokingState);
    }

    else if (auto *dimensionStmtNode = dynamic_cast<Fortran90Parser::DimensionStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DimensionStmtContext(nullptr, dimensionStmtNode->invokingState);
    }

    else if (auto *arrayDeclaratorListNode = dynamic_cast<Fortran90Parser::ArrayDeclaratorListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayDeclaratorListContext(nullptr, arrayDeclaratorListNode->invokingState);
    }

    else if (auto *commonStmtNode = dynamic_cast<Fortran90Parser::CommonStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommonStmtContext(nullptr, commonStmtNode->invokingState);
    }

    else if (auto *comlistNode = dynamic_cast<Fortran90Parser::ComlistContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComlistContext(nullptr, comlistNode->invokingState);
    }

    else if (auto *commonBlockObjectNode = dynamic_cast<Fortran90Parser::CommonBlockObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommonBlockObjectContext(nullptr, commonBlockObjectNode->invokingState);
    }

    else if (auto *arrayDeclaratorNode = dynamic_cast<Fortran90Parser::ArrayDeclaratorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayDeclaratorContext(nullptr, arrayDeclaratorNode->invokingState);
    }

    else if (auto *comblockNode = dynamic_cast<Fortran90Parser::ComblockContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComblockContext(nullptr, comblockNode->invokingState);
    }

    else if (auto *commonBlockNameNode = dynamic_cast<Fortran90Parser::CommonBlockNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommonBlockNameContext(nullptr, commonBlockNameNode->invokingState);
    }

    else if (auto *typeDeclarationStmtNode = dynamic_cast<Fortran90Parser::TypeDeclarationStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TypeDeclarationStmtContext(nullptr, typeDeclarationStmtNode->invokingState);
    }

    else if (auto *attrSpecSeqNode = dynamic_cast<Fortran90Parser::AttrSpecSeqContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AttrSpecSeqContext(nullptr, attrSpecSeqNode->invokingState);
    }

    else if (auto *attrSpecNode = dynamic_cast<Fortran90Parser::AttrSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AttrSpecContext(nullptr, attrSpecNode->invokingState);
    }

    else if (auto *entityDeclListNode = dynamic_cast<Fortran90Parser::EntityDeclListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EntityDeclListContext(nullptr, entityDeclListNode->invokingState);
    }

    else if (auto *entityDeclNode = dynamic_cast<Fortran90Parser::EntityDeclContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EntityDeclContext(nullptr, entityDeclNode->invokingState);
    }

    else if (auto *objectNameNode = dynamic_cast<Fortran90Parser::ObjectNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ObjectNameContext(nullptr, objectNameNode->invokingState);
    }

    else if (auto *nameNode = dynamic_cast<Fortran90Parser::NameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NameContext(nullptr, nameNode->invokingState);
    }

    else if (auto *arraySpecNode = dynamic_cast<Fortran90Parser::ArraySpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArraySpecContext(nullptr, arraySpecNode->invokingState);
    }

    else if (auto *assumedShapeSpecListNode = dynamic_cast<Fortran90Parser::AssumedShapeSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssumedShapeSpecListContext(nullptr, assumedShapeSpecListNode->invokingState);
    }

    else if (auto *assumedShapeSpecNode = dynamic_cast<Fortran90Parser::AssumedShapeSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssumedShapeSpecContext(nullptr, assumedShapeSpecNode->invokingState);
    }

    else if (auto *assumedSizeSpecNode = dynamic_cast<Fortran90Parser::AssumedSizeSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssumedSizeSpecContext(nullptr, assumedSizeSpecNode->invokingState);
    }

    else if (auto *interfaceBlockNode = dynamic_cast<Fortran90Parser::InterfaceBlockContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InterfaceBlockContext(nullptr, interfaceBlockNode->invokingState);
    }

    else if (auto *endInterfaceStmtNode = dynamic_cast<Fortran90Parser::EndInterfaceStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndInterfaceStmtContext(nullptr, endInterfaceStmtNode->invokingState);
    }

    else if (auto *interfaceStmtNode = dynamic_cast<Fortran90Parser::InterfaceStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InterfaceStmtContext(nullptr, interfaceStmtNode->invokingState);
    }

    else if (auto *genericSpecNode = dynamic_cast<Fortran90Parser::GenericSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::GenericSpecContext(nullptr, genericSpecNode->invokingState);
    }

    else if (auto *definedOperatorNode = dynamic_cast<Fortran90Parser::DefinedOperatorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DefinedOperatorContext(nullptr, definedOperatorNode->invokingState);
    }

    else if (auto *interfaceBlockBodyNode = dynamic_cast<Fortran90Parser::InterfaceBlockBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InterfaceBlockBodyContext(nullptr, interfaceBlockBodyNode->invokingState);
    }

    else if (auto *interfaceBodyPartConstructNode = dynamic_cast<Fortran90Parser::InterfaceBodyPartConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InterfaceBodyPartConstructContext(nullptr, interfaceBodyPartConstructNode->invokingState);
    }

    else if (auto *moduleProcedureStmtNode = dynamic_cast<Fortran90Parser::ModuleProcedureStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleProcedureStmtContext(nullptr, moduleProcedureStmtNode->invokingState);
    }

    else if (auto *procedureNameListNode = dynamic_cast<Fortran90Parser::ProcedureNameListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ProcedureNameListContext(nullptr, procedureNameListNode->invokingState);
    }

    else if (auto *procedureNameNode = dynamic_cast<Fortran90Parser::ProcedureNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ProcedureNameContext(nullptr, procedureNameNode->invokingState);
    }

    else if (auto *interfaceBodyNode = dynamic_cast<Fortran90Parser::InterfaceBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InterfaceBodyContext(nullptr, interfaceBodyNode->invokingState);
    }

    else if (auto *subroutineInterfaceRangeNode = dynamic_cast<Fortran90Parser::SubroutineInterfaceRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineInterfaceRangeContext(nullptr, subroutineInterfaceRangeNode->invokingState);
    }

    else if (auto *endSubroutineStmtNode = dynamic_cast<Fortran90Parser::EndSubroutineStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndSubroutineStmtContext(nullptr, endSubroutineStmtNode->invokingState);
    }

    else if (auto *recursiveNode = dynamic_cast<Fortran90Parser::RecursiveContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RecursiveContext(nullptr, recursiveNode->invokingState);
    }

    else if (auto *functionPrefixNode = dynamic_cast<Fortran90Parser::FunctionPrefixContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionPrefixContext(nullptr, functionPrefixNode->invokingState);
    }

    else if (auto *functionInterfaceRangeNode = dynamic_cast<Fortran90Parser::FunctionInterfaceRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionInterfaceRangeContext(nullptr, functionInterfaceRangeNode->invokingState);
    }

    else if (auto *functionParListNode = dynamic_cast<Fortran90Parser::FunctionParListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionParListContext(nullptr, functionParListNode->invokingState);
    }

    else if (auto *functionParsNode = dynamic_cast<Fortran90Parser::FunctionParsContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionParsContext(nullptr, functionParsNode->invokingState);
    }

    else if (auto *functionParNode = dynamic_cast<Fortran90Parser::FunctionParContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionParContext(nullptr, functionParNode->invokingState);
    }

    else if (auto *subprogramInterfaceBodyNode = dynamic_cast<Fortran90Parser::SubprogramInterfaceBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubprogramInterfaceBodyContext(nullptr, subprogramInterfaceBodyNode->invokingState);
    }

    else if (auto *endFunctionStmtNode = dynamic_cast<Fortran90Parser::EndFunctionStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndFunctionStmtContext(nullptr, endFunctionStmtNode->invokingState);
    }

    else if (auto *derivedTypeDefNode = dynamic_cast<Fortran90Parser::DerivedTypeDefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DerivedTypeDefContext(nullptr, derivedTypeDefNode->invokingState);
    }

    else if (auto *endTypeStmtNode = dynamic_cast<Fortran90Parser::EndTypeStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndTypeStmtContext(nullptr, endTypeStmtNode->invokingState);
    }

    else if (auto *derivedTypeStmtNode = dynamic_cast<Fortran90Parser::DerivedTypeStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DerivedTypeStmtContext(nullptr, derivedTypeStmtNode->invokingState);
    }

    else if (auto *derivedTypeBodyNode = dynamic_cast<Fortran90Parser::DerivedTypeBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DerivedTypeBodyContext(nullptr, derivedTypeBodyNode->invokingState);
    }

    else if (auto *derivedTypeBodyConstructNode = dynamic_cast<Fortran90Parser::DerivedTypeBodyConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DerivedTypeBodyConstructContext(nullptr, derivedTypeBodyConstructNode->invokingState);
    }

    else if (auto *privateSequenceStmtNode = dynamic_cast<Fortran90Parser::PrivateSequenceStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PrivateSequenceStmtContext(nullptr, privateSequenceStmtNode->invokingState);
    }

    else if (auto *componentDefStmtNode = dynamic_cast<Fortran90Parser::ComponentDefStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentDefStmtContext(nullptr, componentDefStmtNode->invokingState);
    }

    else if (auto *componentDeclListNode = dynamic_cast<Fortran90Parser::ComponentDeclListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentDeclListContext(nullptr, componentDeclListNode->invokingState);
    }

    else if (auto *componentDeclNode = dynamic_cast<Fortran90Parser::ComponentDeclContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentDeclContext(nullptr, componentDeclNode->invokingState);
    }

    else if (auto *componentNameNode = dynamic_cast<Fortran90Parser::ComponentNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentNameContext(nullptr, componentNameNode->invokingState);
    }

    else if (auto *componentAttrSpecListNode = dynamic_cast<Fortran90Parser::ComponentAttrSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentAttrSpecListContext(nullptr, componentAttrSpecListNode->invokingState);
    }

    else if (auto *componentAttrSpecNode = dynamic_cast<Fortran90Parser::ComponentAttrSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentAttrSpecContext(nullptr, componentAttrSpecNode->invokingState);
    }

    else if (auto *componentArraySpecNode = dynamic_cast<Fortran90Parser::ComponentArraySpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComponentArraySpecContext(nullptr, componentArraySpecNode->invokingState);
    }

    else if (auto *explicitShapeSpecListNode = dynamic_cast<Fortran90Parser::ExplicitShapeSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExplicitShapeSpecListContext(nullptr, explicitShapeSpecListNode->invokingState);
    }

    else if (auto *explicitShapeSpecNode = dynamic_cast<Fortran90Parser::ExplicitShapeSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExplicitShapeSpecContext(nullptr, explicitShapeSpecNode->invokingState);
    }

    else if (auto *lowerBoundNode = dynamic_cast<Fortran90Parser::LowerBoundContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LowerBoundContext(nullptr, lowerBoundNode->invokingState);
    }

    else if (auto *upperBoundNode = dynamic_cast<Fortran90Parser::UpperBoundContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UpperBoundContext(nullptr, upperBoundNode->invokingState);
    }

    else if (auto *deferredShapeSpecListNode = dynamic_cast<Fortran90Parser::DeferredShapeSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DeferredShapeSpecListContext(nullptr, deferredShapeSpecListNode->invokingState);
    }

    else if (auto *deferredShapeSpecNode = dynamic_cast<Fortran90Parser::DeferredShapeSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DeferredShapeSpecContext(nullptr, deferredShapeSpecNode->invokingState);
    }

    else if (auto *typeSpecNode = dynamic_cast<Fortran90Parser::TypeSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TypeSpecContext(nullptr, typeSpecNode->invokingState);
    }

    else if (auto *kindSelectorNode = dynamic_cast<Fortran90Parser::KindSelectorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::KindSelectorContext(nullptr, kindSelectorNode->invokingState);
    }

    else if (auto *typeNameNode = dynamic_cast<Fortran90Parser::TypeNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TypeNameContext(nullptr, typeNameNode->invokingState);
    }

    else if (auto *charSelectorNode = dynamic_cast<Fortran90Parser::CharSelectorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CharSelectorContext(nullptr, charSelectorNode->invokingState);
    }

    else if (auto *lengthSelectorNode = dynamic_cast<Fortran90Parser::LengthSelectorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LengthSelectorContext(nullptr, lengthSelectorNode->invokingState);
    }

    else if (auto *charLengthNode = dynamic_cast<Fortran90Parser::CharLengthContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CharLengthContext(nullptr, charLengthNode->invokingState);
    }

    else if (auto *constantNode = dynamic_cast<Fortran90Parser::ConstantContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ConstantContext(nullptr, constantNode->invokingState);
    }

    else if (auto *bozLiteralConstantNode = dynamic_cast<Fortran90Parser::BozLiteralConstantContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BozLiteralConstantContext(nullptr, bozLiteralConstantNode->invokingState);
    }

    else if (auto *structureConstructorNode = dynamic_cast<Fortran90Parser::StructureConstructorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::StructureConstructorContext(nullptr, structureConstructorNode->invokingState);
    }

    else if (auto *exprListNode = dynamic_cast<Fortran90Parser::ExprListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExprListContext(nullptr, exprListNode->invokingState);
    }

    else if (auto *namedConstantUseNode = dynamic_cast<Fortran90Parser::NamedConstantUseContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NamedConstantUseContext(nullptr, namedConstantUseNode->invokingState);
    }

    else if (auto *typeParamValueNode = dynamic_cast<Fortran90Parser::TypeParamValueContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TypeParamValueContext(nullptr, typeParamValueNode->invokingState);
    }

    else if (auto *moduleStmtNode = dynamic_cast<Fortran90Parser::ModuleStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleStmtContext(nullptr, moduleStmtNode->invokingState);
    }

    else if (auto *moduleNameNode = dynamic_cast<Fortran90Parser::ModuleNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleNameContext(nullptr, moduleNameNode->invokingState);
    }

    else if (auto *identNode = dynamic_cast<Fortran90Parser::IdentContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IdentContext(nullptr, identNode->invokingState);
    }

    else if (auto *moduleBodyNode = dynamic_cast<Fortran90Parser::ModuleBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleBodyContext(nullptr, moduleBodyNode->invokingState);
    }

    else if (auto *moduleSubprogramPartConstructNode = dynamic_cast<Fortran90Parser::ModuleSubprogramPartConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleSubprogramPartConstructContext(nullptr, moduleSubprogramPartConstructNode->invokingState);
    }

    else if (auto *containsStmtNode = dynamic_cast<Fortran90Parser::ContainsStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ContainsStmtContext(nullptr, containsStmtNode->invokingState);
    }

    else if (auto *moduleSubprogramNode = dynamic_cast<Fortran90Parser::ModuleSubprogramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ModuleSubprogramContext(nullptr, moduleSubprogramNode->invokingState);
    }

    else if (auto *functionSubprogramNode = dynamic_cast<Fortran90Parser::FunctionSubprogramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionSubprogramContext(nullptr, functionSubprogramNode->invokingState);
    }

    else if (auto *functionNameNode = dynamic_cast<Fortran90Parser::FunctionNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionNameContext(nullptr, functionNameNode->invokingState);
    }

    else if (auto *functionRangeNode = dynamic_cast<Fortran90Parser::FunctionRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionRangeContext(nullptr, functionRangeNode->invokingState);
    }

    else if (auto *bodyNode = dynamic_cast<Fortran90Parser::BodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BodyContext(nullptr, bodyNode->invokingState);
    }

    else if (auto *bodyConstructNode = dynamic_cast<Fortran90Parser::BodyConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BodyConstructContext(nullptr, bodyConstructNode->invokingState);
    }

    else if (auto *executableConstructNode = dynamic_cast<Fortran90Parser::ExecutableConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExecutableConstructContext(nullptr, executableConstructNode->invokingState);
    }

    else if (auto *whereConstructNode = dynamic_cast<Fortran90Parser::WhereConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::WhereConstructContext(nullptr, whereConstructNode->invokingState);
    }

    else if (auto *elseWhereNode = dynamic_cast<Fortran90Parser::ElseWhereContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElseWhereContext(nullptr, elseWhereNode->invokingState);
    }

    else if (auto *elsewhereStmtNode = dynamic_cast<Fortran90Parser::ElsewhereStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElsewhereStmtContext(nullptr, elsewhereStmtNode->invokingState);
    }

    else if (auto *endWhereStmtNode = dynamic_cast<Fortran90Parser::EndWhereStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndWhereStmtContext(nullptr, endWhereStmtNode->invokingState);
    }

    else if (auto *whereNode = dynamic_cast<Fortran90Parser::WhereContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::WhereContext(nullptr, whereNode->invokingState);
    }

    else if (auto *whereConstructStmtNode = dynamic_cast<Fortran90Parser::WhereConstructStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::WhereConstructStmtContext(nullptr, whereConstructStmtNode->invokingState);
    }

    else if (auto *maskExprNode = dynamic_cast<Fortran90Parser::MaskExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::MaskExprContext(nullptr, maskExprNode->invokingState);
    }

    else if (auto *caseConstructNode = dynamic_cast<Fortran90Parser::CaseConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseConstructContext(nullptr, caseConstructNode->invokingState);
    }

    else if (auto *selectCaseRangeNode = dynamic_cast<Fortran90Parser::SelectCaseRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SelectCaseRangeContext(nullptr, selectCaseRangeNode->invokingState);
    }

    else if (auto *endSelectStmtNode = dynamic_cast<Fortran90Parser::EndSelectStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndSelectStmtContext(nullptr, endSelectStmtNode->invokingState);
    }

    else if (auto *selectCaseBodyNode = dynamic_cast<Fortran90Parser::SelectCaseBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SelectCaseBodyContext(nullptr, selectCaseBodyNode->invokingState);
    }

    else if (auto *caseBodyConstructNode = dynamic_cast<Fortran90Parser::CaseBodyConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseBodyConstructContext(nullptr, caseBodyConstructNode->invokingState);
    }

    else if (auto *caseStmtNode = dynamic_cast<Fortran90Parser::CaseStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseStmtContext(nullptr, caseStmtNode->invokingState);
    }

    else if (auto *caseSelectorNode = dynamic_cast<Fortran90Parser::CaseSelectorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseSelectorContext(nullptr, caseSelectorNode->invokingState);
    }

    else if (auto *caseValueRangeListNode = dynamic_cast<Fortran90Parser::CaseValueRangeListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseValueRangeListContext(nullptr, caseValueRangeListNode->invokingState);
    }

    else if (auto *caseValueRangeNode = dynamic_cast<Fortran90Parser::CaseValueRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CaseValueRangeContext(nullptr, caseValueRangeNode->invokingState);
    }

    else if (auto *ifConstructNode = dynamic_cast<Fortran90Parser::IfConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IfConstructContext(nullptr, ifConstructNode->invokingState);
    }

    else if (auto *ifThenStmtNode = dynamic_cast<Fortran90Parser::IfThenStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IfThenStmtContext(nullptr, ifThenStmtNode->invokingState);
    }

    else if (auto *conditionalBodyNode = dynamic_cast<Fortran90Parser::ConditionalBodyContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ConditionalBodyContext(nullptr, conditionalBodyNode->invokingState);
    }

    else if (auto *elseIfConstructNode = dynamic_cast<Fortran90Parser::ElseIfConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElseIfConstructContext(nullptr, elseIfConstructNode->invokingState);
    }

    else if (auto *elseIfStmtNode = dynamic_cast<Fortran90Parser::ElseIfStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElseIfStmtContext(nullptr, elseIfStmtNode->invokingState);
    }

    else if (auto *elseConstructNode = dynamic_cast<Fortran90Parser::ElseConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElseConstructContext(nullptr, elseConstructNode->invokingState);
    }

    else if (auto *elseStmtNode = dynamic_cast<Fortran90Parser::ElseStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ElseStmtContext(nullptr, elseStmtNode->invokingState);
    }

    else if (auto *endIfStmtNode = dynamic_cast<Fortran90Parser::EndIfStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndIfStmtContext(nullptr, endIfStmtNode->invokingState);
    }

    else if (auto *doConstructNode = dynamic_cast<Fortran90Parser::DoConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DoConstructContext(nullptr, doConstructNode->invokingState);
    }

    else if (auto *blockDoConstructNode = dynamic_cast<Fortran90Parser::BlockDoConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BlockDoConstructContext(nullptr, blockDoConstructNode->invokingState);
    }

    else if (auto *endDoStmtNode = dynamic_cast<Fortran90Parser::EndDoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndDoStmtContext(nullptr, endDoStmtNode->invokingState);
    }

    else if (auto *endNameNode = dynamic_cast<Fortran90Parser::EndNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndNameContext(nullptr, endNameNode->invokingState);
    }

    else if (auto *nameColonNode = dynamic_cast<Fortran90Parser::NameColonContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NameColonContext(nullptr, nameColonNode->invokingState);
    }

    else if (auto *labelDoStmtNode = dynamic_cast<Fortran90Parser::LabelDoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LabelDoStmtContext(nullptr, labelDoStmtNode->invokingState);
    }

    else if (auto *doLblRefNode = dynamic_cast<Fortran90Parser::DoLblRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DoLblRefContext(nullptr, doLblRefNode->invokingState);
    }

    else if (auto *doLblDefNode = dynamic_cast<Fortran90Parser::DoLblDefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DoLblDefContext(nullptr, doLblDefNode->invokingState);
    }

    else if (auto *doLabelStmtNode = dynamic_cast<Fortran90Parser::DoLabelStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DoLabelStmtContext(nullptr, doLabelStmtNode->invokingState);
    }

    else if (auto *executionPartConstructNode = dynamic_cast<Fortran90Parser::ExecutionPartConstructContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExecutionPartConstructContext(nullptr, executionPartConstructNode->invokingState);
    }

    else if (auto *doubleDoStmtNode = dynamic_cast<Fortran90Parser::DoubleDoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DoubleDoStmtContext(nullptr, doubleDoStmtNode->invokingState);
    }

    else if (auto *dataStmtNode = dynamic_cast<Fortran90Parser::DataStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataStmtContext(nullptr, dataStmtNode->invokingState);
    }

    else if (auto *dataStmtSetNode = dynamic_cast<Fortran90Parser::DataStmtSetContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataStmtSetContext(nullptr, dataStmtSetNode->invokingState);
    }

    else if (auto *dse1Node = dynamic_cast<Fortran90Parser::Dse1Context *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Dse1Context(nullptr, dse1Node->invokingState);
    }

    else if (auto *dse2Node = dynamic_cast<Fortran90Parser::Dse2Context *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Dse2Context(nullptr, dse2Node->invokingState);
    }

    else if (auto *dataStmtValueNode = dynamic_cast<Fortran90Parser::DataStmtValueContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataStmtValueContext(nullptr, dataStmtValueNode->invokingState);
    }

    else if (auto *dataStmtObjectNode = dynamic_cast<Fortran90Parser::DataStmtObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataStmtObjectContext(nullptr, dataStmtObjectNode->invokingState);
    }

    else if (auto *variableNode = dynamic_cast<Fortran90Parser::VariableContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::VariableContext(nullptr, variableNode->invokingState);
    }

    else if (auto *subscriptListRefNode = dynamic_cast<Fortran90Parser::SubscriptListRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubscriptListRefContext(nullptr, subscriptListRefNode->invokingState);
    }

    else if (auto *subscriptListNode = dynamic_cast<Fortran90Parser::SubscriptListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubscriptListContext(nullptr, subscriptListNode->invokingState);
    }

    else if (auto *subscriptNode = dynamic_cast<Fortran90Parser::SubscriptContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubscriptContext(nullptr, subscriptNode->invokingState);
    }

    else if (auto *substringRangeNode = dynamic_cast<Fortran90Parser::SubstringRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubstringRangeContext(nullptr, substringRangeNode->invokingState);
    }

    else if (auto *dataImpliedDoNode = dynamic_cast<Fortran90Parser::DataImpliedDoContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataImpliedDoContext(nullptr, dataImpliedDoNode->invokingState);
    }

    else if (auto *dataIDoObjectListNode = dynamic_cast<Fortran90Parser::DataIDoObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataIDoObjectListContext(nullptr, dataIDoObjectListNode->invokingState);
    }

    else if (auto *dataIDoObjectNode = dynamic_cast<Fortran90Parser::DataIDoObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DataIDoObjectContext(nullptr, dataIDoObjectNode->invokingState);
    }

    else if (auto *structureComponentNode = dynamic_cast<Fortran90Parser::StructureComponentContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::StructureComponentContext(nullptr, structureComponentNode->invokingState);
    }

    else if (auto *fieldSelectorNode = dynamic_cast<Fortran90Parser::FieldSelectorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FieldSelectorContext(nullptr, fieldSelectorNode->invokingState);
    }

    else if (auto *arrayElementNode = dynamic_cast<Fortran90Parser::ArrayElementContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayElementContext(nullptr, arrayElementNode->invokingState);
    }

    else if (auto *impliedDoVariableNode = dynamic_cast<Fortran90Parser::ImpliedDoVariableContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImpliedDoVariableContext(nullptr, impliedDoVariableNode->invokingState);
    }

    else if (auto *commaLoopControlNode = dynamic_cast<Fortran90Parser::CommaLoopControlContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommaLoopControlContext(nullptr, commaLoopControlNode->invokingState);
    }

    else if (auto *loopControlNode = dynamic_cast<Fortran90Parser::LoopControlContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LoopControlContext(nullptr, loopControlNode->invokingState);
    }

    else if (auto *variableNameNode = dynamic_cast<Fortran90Parser::VariableNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::VariableNameContext(nullptr, variableNameNode->invokingState);
    }

    else if (auto *commaExprNode = dynamic_cast<Fortran90Parser::CommaExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommaExprContext(nullptr, commaExprNode->invokingState);
    }

    else if (auto *semicolonStmtNode = dynamic_cast<Fortran90Parser::SemicolonStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SemicolonStmtContext(nullptr, semicolonStmtNode->invokingState);
    }

    else if (auto *actionStmtNode = dynamic_cast<Fortran90Parser::ActionStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ActionStmtContext(nullptr, actionStmtNode->invokingState);
    }

    else if (auto *whereStmtNode = dynamic_cast<Fortran90Parser::WhereStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::WhereStmtContext(nullptr, whereStmtNode->invokingState);
    }

    else if (auto *pointerAssignmentStmtNode = dynamic_cast<Fortran90Parser::PointerAssignmentStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerAssignmentStmtContext(nullptr, pointerAssignmentStmtNode->invokingState);
    }

    else if (auto *targetNode = dynamic_cast<Fortran90Parser::TargetContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::TargetContext(nullptr, targetNode->invokingState);
    }

    else if (auto *nullifyStmtNode = dynamic_cast<Fortran90Parser::NullifyStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NullifyStmtContext(nullptr, nullifyStmtNode->invokingState);
    }

    else if (auto *pointerObjectListNode = dynamic_cast<Fortran90Parser::PointerObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerObjectListContext(nullptr, pointerObjectListNode->invokingState);
    }

    else if (auto *pointerObjectNode = dynamic_cast<Fortran90Parser::PointerObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerObjectContext(nullptr, pointerObjectNode->invokingState);
    }

    else if (auto *pointerFieldNode = dynamic_cast<Fortran90Parser::PointerFieldContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PointerFieldContext(nullptr, pointerFieldNode->invokingState);
    }

    else if (auto *exitStmtNode = dynamic_cast<Fortran90Parser::ExitStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExitStmtContext(nullptr, exitStmtNode->invokingState);
    }

    else if (auto *deallocateStmtNode = dynamic_cast<Fortran90Parser::DeallocateStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DeallocateStmtContext(nullptr, deallocateStmtNode->invokingState);
    }

    else if (auto *allocateObjectListNode = dynamic_cast<Fortran90Parser::AllocateObjectListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocateObjectListContext(nullptr, allocateObjectListNode->invokingState);
    }

    else if (auto *cycleStmtNode = dynamic_cast<Fortran90Parser::CycleStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CycleStmtContext(nullptr, cycleStmtNode->invokingState);
    }

    else if (auto *allocateStmtNode = dynamic_cast<Fortran90Parser::AllocateStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocateStmtContext(nullptr, allocateStmtNode->invokingState);
    }

    else if (auto *allocationListNode = dynamic_cast<Fortran90Parser::AllocationListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocationListContext(nullptr, allocationListNode->invokingState);
    }

    else if (auto *allocationNode = dynamic_cast<Fortran90Parser::AllocationContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocationContext(nullptr, allocationNode->invokingState);
    }

    else if (auto *allocateObjectNode = dynamic_cast<Fortran90Parser::AllocateObjectContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocateObjectContext(nullptr, allocateObjectNode->invokingState);
    }

    else if (auto *allocatedShapeNode = dynamic_cast<Fortran90Parser::AllocatedShapeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AllocatedShapeContext(nullptr, allocatedShapeNode->invokingState);
    }

    else if (auto *stopStmtNode = dynamic_cast<Fortran90Parser::StopStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::StopStmtContext(nullptr, stopStmtNode->invokingState);
    }

    else if (auto *writeStmtNode = dynamic_cast<Fortran90Parser::WriteStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::WriteStmtContext(nullptr, writeStmtNode->invokingState);
    }

    else if (auto *ioControlSpecListNode = dynamic_cast<Fortran90Parser::IoControlSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IoControlSpecListContext(nullptr, ioControlSpecListNode->invokingState);
    }

    else if (auto *stmtFunctionStmtNode = dynamic_cast<Fortran90Parser::StmtFunctionStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::StmtFunctionStmtContext(nullptr, stmtFunctionStmtNode->invokingState);
    }

    else if (auto *stmtFunctionRangeNode = dynamic_cast<Fortran90Parser::StmtFunctionRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::StmtFunctionRangeContext(nullptr, stmtFunctionRangeNode->invokingState);
    }

    else if (auto *sFDummyArgNameListNode = dynamic_cast<Fortran90Parser::SFDummyArgNameListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SFDummyArgNameListContext(nullptr, sFDummyArgNameListNode->invokingState);
    }

    else if (auto *sFDummyArgNameNode = dynamic_cast<Fortran90Parser::SFDummyArgNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SFDummyArgNameContext(nullptr, sFDummyArgNameNode->invokingState);
    }

    else if (auto *returnStmtNode = dynamic_cast<Fortran90Parser::ReturnStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ReturnStmtContext(nullptr, returnStmtNode->invokingState);
    }

    else if (auto *rewindStmtNode = dynamic_cast<Fortran90Parser::RewindStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RewindStmtContext(nullptr, rewindStmtNode->invokingState);
    }

    else if (auto *readStmtNode = dynamic_cast<Fortran90Parser::ReadStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ReadStmtContext(nullptr, readStmtNode->invokingState);
    }

    else if (auto *commaInputItemListNode = dynamic_cast<Fortran90Parser::CommaInputItemListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommaInputItemListContext(nullptr, commaInputItemListNode->invokingState);
    }

    else if (auto *rdFmtIdNode = dynamic_cast<Fortran90Parser::RdFmtIdContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RdFmtIdContext(nullptr, rdFmtIdNode->invokingState);
    }

    else if (auto *rdFmtIdExprNode = dynamic_cast<Fortran90Parser::RdFmtIdExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RdFmtIdExprContext(nullptr, rdFmtIdExprNode->invokingState);
    }

    else if (auto *inputItemListNode = dynamic_cast<Fortran90Parser::InputItemListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InputItemListContext(nullptr, inputItemListNode->invokingState);
    }

    else if (auto *inputItemNode = dynamic_cast<Fortran90Parser::InputItemContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InputItemContext(nullptr, inputItemNode->invokingState);
    }

    else if (auto *inputImpliedDoNode = dynamic_cast<Fortran90Parser::InputImpliedDoContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InputImpliedDoContext(nullptr, inputImpliedDoNode->invokingState);
    }

    else if (auto *rdCtlSpecNode = dynamic_cast<Fortran90Parser::RdCtlSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RdCtlSpecContext(nullptr, rdCtlSpecNode->invokingState);
    }

    else if (auto *rdUnitIdNode = dynamic_cast<Fortran90Parser::RdUnitIdContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RdUnitIdContext(nullptr, rdUnitIdNode->invokingState);
    }

    else if (auto *rdIoCtlSpecListNode = dynamic_cast<Fortran90Parser::RdIoCtlSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RdIoCtlSpecListContext(nullptr, rdIoCtlSpecListNode->invokingState);
    }

    else if (auto *ioControlSpecNode = dynamic_cast<Fortran90Parser::IoControlSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IoControlSpecContext(nullptr, ioControlSpecNode->invokingState);
    }

    else if (auto *printStmtNode = dynamic_cast<Fortran90Parser::PrintStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PrintStmtContext(nullptr, printStmtNode->invokingState);
    }

    else if (auto *outputItemListNode = dynamic_cast<Fortran90Parser::OutputItemListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OutputItemListContext(nullptr, outputItemListNode->invokingState);
    }

    else if (auto *outputItemList1Node = dynamic_cast<Fortran90Parser::OutputItemList1Context *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OutputItemList1Context(nullptr, outputItemList1Node->invokingState);
    }

    else if (auto *outputImpliedDoNode = dynamic_cast<Fortran90Parser::OutputImpliedDoContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OutputImpliedDoContext(nullptr, outputImpliedDoNode->invokingState);
    }

    else if (auto *formatIdentifierNode = dynamic_cast<Fortran90Parser::FormatIdentifierContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FormatIdentifierContext(nullptr, formatIdentifierNode->invokingState);
    }

    else if (auto *pauseStmtNode = dynamic_cast<Fortran90Parser::PauseStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PauseStmtContext(nullptr, pauseStmtNode->invokingState);
    }

    else if (auto *openStmtNode = dynamic_cast<Fortran90Parser::OpenStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OpenStmtContext(nullptr, openStmtNode->invokingState);
    }

    else if (auto *connectSpecListNode = dynamic_cast<Fortran90Parser::ConnectSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ConnectSpecListContext(nullptr, connectSpecListNode->invokingState);
    }

    else if (auto *connectSpecNode = dynamic_cast<Fortran90Parser::ConnectSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ConnectSpecContext(nullptr, connectSpecNode->invokingState);
    }

    else if (auto *inquireStmtNode = dynamic_cast<Fortran90Parser::InquireStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InquireStmtContext(nullptr, inquireStmtNode->invokingState);
    }

    else if (auto *inquireSpecListNode = dynamic_cast<Fortran90Parser::InquireSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InquireSpecListContext(nullptr, inquireSpecListNode->invokingState);
    }

    else if (auto *inquireSpecNode = dynamic_cast<Fortran90Parser::InquireSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::InquireSpecContext(nullptr, inquireSpecNode->invokingState);
    }

    else if (auto *assignedGotoStmtNode = dynamic_cast<Fortran90Parser::AssignedGotoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssignedGotoStmtContext(nullptr, assignedGotoStmtNode->invokingState);
    }

    else if (auto *variableCommaNode = dynamic_cast<Fortran90Parser::VariableCommaContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::VariableCommaContext(nullptr, variableCommaNode->invokingState);
    }

    else if (auto *gotoStmtNode = dynamic_cast<Fortran90Parser::GotoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::GotoStmtContext(nullptr, gotoStmtNode->invokingState);
    }

    else if (auto *computedGotoStmtNode = dynamic_cast<Fortran90Parser::ComputedGotoStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComputedGotoStmtContext(nullptr, computedGotoStmtNode->invokingState);
    }

    else if (auto *lblRefListNode = dynamic_cast<Fortran90Parser::LblRefListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LblRefListContext(nullptr, lblRefListNode->invokingState);
    }

    else if (auto *endfileStmtNode = dynamic_cast<Fortran90Parser::EndfileStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EndfileStmtContext(nullptr, endfileStmtNode->invokingState);
    }

    else if (auto *continueStmtNode = dynamic_cast<Fortran90Parser::ContinueStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ContinueStmtContext(nullptr, continueStmtNode->invokingState);
    }

    else if (auto *closeStmtNode = dynamic_cast<Fortran90Parser::CloseStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CloseStmtContext(nullptr, closeStmtNode->invokingState);
    }

    else if (auto *closeSpecListNode = dynamic_cast<Fortran90Parser::CloseSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CloseSpecListContext(nullptr, closeSpecListNode->invokingState);
    }

    else if (auto *closeSpecNode = dynamic_cast<Fortran90Parser::CloseSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CloseSpecContext(nullptr, closeSpecNode->invokingState);
    }

    else if (auto *cExpressionNode = dynamic_cast<Fortran90Parser::CExpressionContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CExpressionContext(nullptr, cExpressionNode->invokingState);
    }

    else if (auto *cPrimaryNode = dynamic_cast<Fortran90Parser::CPrimaryContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CPrimaryContext(nullptr, cPrimaryNode->invokingState);
    }

    else if (auto *cOperandNode = dynamic_cast<Fortran90Parser::COperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::COperandContext(nullptr, cOperandNode->invokingState);
    }

    else if (auto *cPrimaryConcatOpNode = dynamic_cast<Fortran90Parser::CPrimaryConcatOpContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CPrimaryConcatOpContext(nullptr, cPrimaryConcatOpNode->invokingState);
    }

    else if (auto *callStmtNode = dynamic_cast<Fortran90Parser::CallStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CallStmtContext(nullptr, callStmtNode->invokingState);
    }

    else if (auto *subroutineNameUseNode = dynamic_cast<Fortran90Parser::SubroutineNameUseContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineNameUseContext(nullptr, subroutineNameUseNode->invokingState);
    }

    else if (auto *subroutineArgListNode = dynamic_cast<Fortran90Parser::SubroutineArgListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineArgListContext(nullptr, subroutineArgListNode->invokingState);
    }

    else if (auto *subroutineArgNode = dynamic_cast<Fortran90Parser::SubroutineArgContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineArgContext(nullptr, subroutineArgNode->invokingState);
    }

    else if (auto *arithmeticIfStmtNode = dynamic_cast<Fortran90Parser::ArithmeticIfStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArithmeticIfStmtContext(nullptr, arithmeticIfStmtNode->invokingState);
    }

    else if (auto *lblRefNode = dynamic_cast<Fortran90Parser::LblRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LblRefContext(nullptr, lblRefNode->invokingState);
    }

    else if (auto *labelNode = dynamic_cast<Fortran90Parser::LabelContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LabelContext(nullptr, labelNode->invokingState);
    }

    else if (auto *assignmentStmtNode = dynamic_cast<Fortran90Parser::AssignmentStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssignmentStmtContext(nullptr, assignmentStmtNode->invokingState);
    }

    else if (auto *sFExprListRefNode = dynamic_cast<Fortran90Parser::SFExprListRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SFExprListRefContext(nullptr, sFExprListRefNode->invokingState);
    }

    else if (auto *sFExprListNode = dynamic_cast<Fortran90Parser::SFExprListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SFExprListContext(nullptr, sFExprListNode->invokingState);
    }

    else if (auto *commaSectionSubscriptNode = dynamic_cast<Fortran90Parser::CommaSectionSubscriptContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::CommaSectionSubscriptContext(nullptr, commaSectionSubscriptNode->invokingState);
    }

    else if (auto *assignStmtNode = dynamic_cast<Fortran90Parser::AssignStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AssignStmtContext(nullptr, assignStmtNode->invokingState);
    }

    else if (auto *backspaceStmtNode = dynamic_cast<Fortran90Parser::BackspaceStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::BackspaceStmtContext(nullptr, backspaceStmtNode->invokingState);
    }

    else if (auto *unitIdentifierNode = dynamic_cast<Fortran90Parser::UnitIdentifierContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UnitIdentifierContext(nullptr, unitIdentifierNode->invokingState);
    }

    else if (auto *positionSpecListNode = dynamic_cast<Fortran90Parser::PositionSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PositionSpecListContext(nullptr, positionSpecListNode->invokingState);
    }

    else if (auto *unitIdentifierCommaNode = dynamic_cast<Fortran90Parser::UnitIdentifierCommaContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UnitIdentifierCommaContext(nullptr, unitIdentifierCommaNode->invokingState);
    }

    else if (auto *positionSpecNode = dynamic_cast<Fortran90Parser::PositionSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PositionSpecContext(nullptr, positionSpecNode->invokingState);
    }

    else if (auto *scalarVariableNode = dynamic_cast<Fortran90Parser::ScalarVariableContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ScalarVariableContext(nullptr, scalarVariableNode->invokingState);
    }

    else if (auto *uFExprNode = dynamic_cast<Fortran90Parser::UFExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UFExprContext(nullptr, uFExprNode->invokingState);
    }

    else if (auto *uFTermNode = dynamic_cast<Fortran90Parser::UFTermContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UFTermContext(nullptr, uFTermNode->invokingState);
    }

    else if (auto *uFFactorNode = dynamic_cast<Fortran90Parser::UFFactorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UFFactorContext(nullptr, uFFactorNode->invokingState);
    }

    else if (auto *uFPrimaryNode = dynamic_cast<Fortran90Parser::UFPrimaryContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UFPrimaryContext(nullptr, uFPrimaryNode->invokingState);
    }

    else if (auto *subroutineSubprogramNode = dynamic_cast<Fortran90Parser::SubroutineSubprogramContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineSubprogramContext(nullptr, subroutineSubprogramNode->invokingState);
    }

    else if (auto *subroutineNameNode = dynamic_cast<Fortran90Parser::SubroutineNameContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineNameContext(nullptr, subroutineNameNode->invokingState);
    }

    else if (auto *subroutineRangeNode = dynamic_cast<Fortran90Parser::SubroutineRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubroutineRangeContext(nullptr, subroutineRangeNode->invokingState);
    }

    else if (auto *includeStmtNode = dynamic_cast<Fortran90Parser::IncludeStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IncludeStmtContext(nullptr, includeStmtNode->invokingState);
    }

    else if (auto *implicitStmtNode = dynamic_cast<Fortran90Parser::ImplicitStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImplicitStmtContext(nullptr, implicitStmtNode->invokingState);
    }

    else if (auto *implicitSpecListNode = dynamic_cast<Fortran90Parser::ImplicitSpecListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImplicitSpecListContext(nullptr, implicitSpecListNode->invokingState);
    }

    else if (auto *implicitSpecNode = dynamic_cast<Fortran90Parser::ImplicitSpecContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImplicitSpecContext(nullptr, implicitSpecNode->invokingState);
    }

    else if (auto *implicitRangesNode = dynamic_cast<Fortran90Parser::ImplicitRangesContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImplicitRangesContext(nullptr, implicitRangesNode->invokingState);
    }

    else if (auto *implicitRangeNode = dynamic_cast<Fortran90Parser::ImplicitRangeContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ImplicitRangeContext(nullptr, implicitRangeNode->invokingState);
    }

    else if (auto *expressionNode = dynamic_cast<Fortran90Parser::ExpressionContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ExpressionContext(nullptr, expressionNode->invokingState);
    }

    else if (auto *definedBinaryOpNode = dynamic_cast<Fortran90Parser::DefinedBinaryOpContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DefinedBinaryOpContext(nullptr, definedBinaryOpNode->invokingState);
    }

    else if (auto *level5ExprNode = dynamic_cast<Fortran90Parser::Level5ExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Level5ExprContext(nullptr, level5ExprNode->invokingState);
    }

    else if (auto *equivOperandNode = dynamic_cast<Fortran90Parser::EquivOperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::EquivOperandContext(nullptr, equivOperandNode->invokingState);
    }

    else if (auto *orOperandNode = dynamic_cast<Fortran90Parser::OrOperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::OrOperandContext(nullptr, orOperandNode->invokingState);
    }

    else if (auto *andOperandNode = dynamic_cast<Fortran90Parser::AndOperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AndOperandContext(nullptr, andOperandNode->invokingState);
    }

    else if (auto *relOpNode = dynamic_cast<Fortran90Parser::RelOpContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::RelOpContext(nullptr, relOpNode->invokingState);
    }

    else if (auto *level4ExprNode = dynamic_cast<Fortran90Parser::Level4ExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Level4ExprContext(nullptr, level4ExprNode->invokingState);
    }

    else if (auto *level3ExprNode = dynamic_cast<Fortran90Parser::Level3ExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Level3ExprContext(nullptr, level3ExprNode->invokingState);
    }

    else if (auto *level2ExprNode = dynamic_cast<Fortran90Parser::Level2ExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Level2ExprContext(nullptr, level2ExprNode->invokingState);
    }

    else if (auto *signNode = dynamic_cast<Fortran90Parser::SignContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SignContext(nullptr, signNode->invokingState);
    }

    else if (auto *addOperandNode = dynamic_cast<Fortran90Parser::AddOperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AddOperandContext(nullptr, addOperandNode->invokingState);
    }

    else if (auto *multOperandNode = dynamic_cast<Fortran90Parser::MultOperandContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::MultOperandContext(nullptr, multOperandNode->invokingState);
    }

    else if (auto *level1ExprNode = dynamic_cast<Fortran90Parser::Level1ExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::Level1ExprContext(nullptr, level1ExprNode->invokingState);
    }

    else if (auto *definedUnaryOpNode = dynamic_cast<Fortran90Parser::DefinedUnaryOpContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::DefinedUnaryOpContext(nullptr, definedUnaryOpNode->invokingState);
    }

    else if (auto *primaryNode = dynamic_cast<Fortran90Parser::PrimaryContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::PrimaryContext(nullptr, primaryNode->invokingState);
    }

    else if (auto *arrayConstructorNode = dynamic_cast<Fortran90Parser::ArrayConstructorContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ArrayConstructorContext(nullptr, arrayConstructorNode->invokingState);
    }

    else if (auto *acValueListNode = dynamic_cast<Fortran90Parser::AcValueListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AcValueListContext(nullptr, acValueListNode->invokingState);
    }

    else if (auto *acValueList1Node = dynamic_cast<Fortran90Parser::AcValueList1Context *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AcValueList1Context(nullptr, acValueList1Node->invokingState);
    }

    else if (auto *acImpliedDoNode = dynamic_cast<Fortran90Parser::AcImpliedDoContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::AcImpliedDoContext(nullptr, acImpliedDoNode->invokingState);
    }

    else if (auto *functionReferenceNode = dynamic_cast<Fortran90Parser::FunctionReferenceContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionReferenceContext(nullptr, functionReferenceNode->invokingState);
    }

    else if (auto *functionArgListNode = dynamic_cast<Fortran90Parser::FunctionArgListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionArgListContext(nullptr, functionArgListNode->invokingState);
    }

    else if (auto *functionArgNode = dynamic_cast<Fortran90Parser::FunctionArgContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::FunctionArgContext(nullptr, functionArgNode->invokingState);
    }

    else if (auto *nameDataRefNode = dynamic_cast<Fortran90Parser::NameDataRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::NameDataRefContext(nullptr, nameDataRefNode->invokingState);
    }

    else if (auto *complexDataRefTailNode = dynamic_cast<Fortran90Parser::ComplexDataRefTailContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComplexDataRefTailContext(nullptr, complexDataRefTailNode->invokingState);
    }

    else if (auto *sectionSubscriptRefNode = dynamic_cast<Fortran90Parser::SectionSubscriptRefContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SectionSubscriptRefContext(nullptr, sectionSubscriptRefNode->invokingState);
    }

    else if (auto *sectionSubscriptListNode = dynamic_cast<Fortran90Parser::SectionSubscriptListContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SectionSubscriptListContext(nullptr, sectionSubscriptListNode->invokingState);
    }

    else if (auto *sectionSubscriptNode = dynamic_cast<Fortran90Parser::SectionSubscriptContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SectionSubscriptContext(nullptr, sectionSubscriptNode->invokingState);
    }

    else if (auto *subscriptTripletTailNode = dynamic_cast<Fortran90Parser::SubscriptTripletTailContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::SubscriptTripletTailContext(nullptr, subscriptTripletTailNode->invokingState);
    }

    else if (auto *logicalConstantNode = dynamic_cast<Fortran90Parser::LogicalConstantContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::LogicalConstantContext(nullptr, logicalConstantNode->invokingState);
    }

    else if (auto *kindParamNode = dynamic_cast<Fortran90Parser::KindParamContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::KindParamContext(nullptr, kindParamNode->invokingState);
    }

    else if (auto *unsignedArithmeticConstantNode = dynamic_cast<Fortran90Parser::UnsignedArithmeticConstantContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::UnsignedArithmeticConstantContext(nullptr, unsignedArithmeticConstantNode->invokingState);
    }

    else if (auto *complexConstNode = dynamic_cast<Fortran90Parser::ComplexConstContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComplexConstContext(nullptr, complexConstNode->invokingState);
    }

    else if (auto *complexComponentNode = dynamic_cast<Fortran90Parser::ComplexComponentContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ComplexComponentContext(nullptr, complexComponentNode->invokingState);
    }

    else if (auto *constantExprNode = dynamic_cast<Fortran90Parser::ConstantExprContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::ConstantExprContext(nullptr, constantExprNode->invokingState);
    }

    else if (auto *ifStmtNode = dynamic_cast<Fortran90Parser::IfStmtContext *>(nodeToCopy))
    {
        newNode = new Fortran90Parser::IfStmtContext(nullptr, ifStmtNode->invokingState);
    }

    else
    {

        // will set the parent node later
        newNode = new antlr4::InterpreterRuleContext(nullptr, nodeToCopy->invokingState, nodeToCopy->getRuleIndex());
    }

    return newNode;
}