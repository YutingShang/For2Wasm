PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	ADD _t7 i 1
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	GT _t24 j 1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _t11 j 1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	LT _t28 j size_j
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	SUB _t17 i 1
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _t19 j size_j
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _t13 i 1
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	ADD _t30 j 1
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	SUB _t21 i 1
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _t22 j 1
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	GT _t33 j 1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	ADD _t39 i 1
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	LT _t41 j size_j
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	ADD _t35 i 1
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	ADD _t43 i 1
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	ADD _t44 j 1
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	ADD _t9 j 1
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
Converting IfNode to IfElseNode, original text: IF cond0 then0 endif0
Converted IfNode to IfElseNode, new text: IF cond0 then0 else0 endif0
Child: GT _t10 i 1
Child: IF cond1 then1 endif1
Child: ENDELSE
Child: ENDIF
ANALYSISTOOLS: Actually performing first insertion strategy, created ifElseNode: IF cond0 then0 else0 endif0
ANALYSISTOOLS: The then block child is still: 3
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	IF cond1 then1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
else0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
endif0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
Converting IfNode to IfElseNode, original text: IF cond1 then1 endif1
Converted IfNode to IfElseNode, new text: IF cond1 then1 else1 endif1
Child: GT _s1 j 1
Child: SUB _s3 i 1
Child: ENDELSE
Child: ENDIF
ANALYSISTOOLS: Actually performing first insertion strategy, created ifElseNode: IF cond1 then1 else1 endif1
ANALYSISTOOLS: The then block child is still: 1
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: inserting newExpressionNode above placeholder node
Converting IfNode to IfElseNode, original text: IF cond2 then2 endif2
Converted IfNode to IfElseNode, new text: IF cond2 then2 else2 endif2
Child: LT _s2 j size_j
Child: MOV _t21 _s3
Child: ENDELSE
Child: ENDIF
ANALYSISTOOLS: Actually performing first insertion strategy, created ifElseNode: IF cond2 then2 else2 endif2
ANALYSISTOOLS: The then block child is still: 1
PREOptimizer: after inserted newExpressionNode above placeholder node
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: after removing partial redundancy
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
PREOptimizer: entire flowgraph after PRE:
	ENTRY
	DECLARE INT _s4
	DECLARE INT _s3
	DECLARE INT _s2
	DECLARE INT _s1
	DECLARE INT _s0
	DECLARE INT i
	DECLARE INT j
	DECLARE INT ni
	DECLARE INT nj
	DECLARE INT gen
	DECLARE INT neighbors
	DECLARE INT alive_cells
	DECLARE INT ARRAY grid (50, 50)
	DECLARE INT ARRAY new_grid (50, 50)
	DECLARE INT size_i
	DECLARE INT size_j
	DECLARE INT generations
	MOV size_i 50
	MOV size_j 50
	MOV generations 1000000
	LOOP init0 cond0 body0 step0 endloop0
init0: 	MOV i 1
cond0: 	GT _t0 i size_i
	TEST _t0
body0: 	LOOP init1 cond1 body1 step1 endloop1
init1: 	MOV j 1
cond1: 	GT _t2 j size_j
	TEST _t2
body1: 	STORE grid (i, j) 0
	STORE new_grid (i, j) 0
	ENDBODY
step1: 	ADD _t3 j 1
	MOV j _t3
endloop1: 	ENDLOOP
	ENDBODY
step0: 	ADD _t1 i 1
	MOV i _t1
endloop0: 	ENDLOOP
	STORE grid (2, 3) 1
	STORE grid (3, 4) 1
	STORE grid (4, 2) 1
	STORE grid (4, 3) 1
	STORE grid (4, 4) 1
	STORE grid (20, 20) 1
	STORE grid (20, 21) 1
	STORE grid (20, 22) 1
	STORE grid (30, 30) 1
	STORE grid (30, 31) 1
	STORE grid (31, 30) 1
	STORE grid (31, 31) 1
	STORE grid (10, 40) 1
	STORE grid (11, 39) 1
	STORE grid (11, 41) 1
	STORE grid (12, 39) 1
	STORE grid (12, 41) 1
	STORE grid (13, 40) 1
	LOOP init2 cond2 body2 step2 endloop2
init2: 	MOV gen 1
cond2: 	GT _t4 gen generations
	TEST _t4
body2: 	LOOP init3 cond3 body3 step3 endloop3
init3: 	MOV i 1
cond3: 	GT _t6 i size_i
	TEST _t6
body3: 	LOOP init4 cond4 body4 step4 endloop4
init4: 	MOV j 1
	ADD _s0 i 1
cond4: 	GT _t8 j size_j
	TEST _t8
body4: 	MOV neighbors 0
	IF cond0 then0 else0 endif0
cond0: 	GT _t10 i 1
	TEST _t10
then0: 	ADD _s4 j 1
	LT _s2 j size_j
	GT _s1 j 1
	ENDELSE
else0: 	ENDIF
	IF cond3 then3 endif3
cond3: 	MOV _t24 _s1
	TEST _t24
then3: 	SUB _t26 j 1
	LOAD _t27 grid (i, _t26)
	ADD _t25 neighbors _t27
	MOV neighbors _t25
	ENDTHEN
endif3: 	ENDIF
	IF cond4 then4 endif4
cond4: 	MOV _t28 _s2
	TEST _t28
then4: 	MOV _t30 _s4
	LOAD _t31 grid (i, _t30)
	ADD _t29 neighbors _t31
	MOV neighbors _t29
	ENDTHEN
endif4: 	ENDIF
	IF cond5 then5 endif5
cond5: 	LT _t32 i size_i
	TEST _t32
then5: 	IF cond6 then6 endif6
cond6: 	MOV _t33 _s1
	TEST _t33
then6: 	MOV _t35 _s0
	SUB _t36 j 1
	LOAD _t37 grid (_t35, _t36)
	ADD _t34 neighbors _t37
	MOV neighbors _t34
	ENDTHEN
endif6: 	ENDIF
	MOV _t39 _s0
	LOAD _t40 grid (_t39, j)
	ADD _t38 neighbors _t40
	MOV neighbors _t38
	IF cond7 then7 endif7
cond7: 	MOV _t41 _s2
	TEST _t41
then7: 	MOV _t43 _s0
	MOV _t44 _s4
	LOAD _t45 grid (_t43, _t44)
	ADD _t42 neighbors _t45
	MOV neighbors _t42
	ENDTHEN
endif7: 	ENDIF
	ENDTHEN
endif5: 	ENDIF
	IF cond8 then8 else8 endif8
cond8: 	LOAD _t46 grid (i, j)
	EQ _t47 _t46 1
	TEST _t47
then8: 	IF cond9 then9 else9 endif9
cond9: 	LT _t48 neighbors 2
	TEST _t48
then9: 	STORE new_grid (i, j) 0
	ENDTHEN
else9: 	IF cond10 then10 else10 endif10
cond10: 	GT _t49 neighbors 3
	TEST _t49
then10: 	STORE new_grid (i, j) 0
	ENDTHEN
else10: 	STORE new_grid (i, j) 1
	ENDELSE
endif10: 	ENDIF
	ENDELSE
endif9: 	ENDIF
	ENDTHEN
else8: 	IF cond11 then11 else11 endif11
cond11: 	EQ _t50 neighbors 3
	TEST _t50
then11: 	STORE new_grid (i, j) 1
	ENDTHEN
else11: 	STORE new_grid (i, j) 0
	ENDELSE
endif11: 	ENDIF
	ENDELSE
endif8: 	ENDIF
	ENDBODY
endif0: 	IF cond1 then1 else1 endif1
cond1: 	GT _s1 j 1
	MOV _t11 _s1
	TEST _t11
then1: 	SUB _s3 i 1
	MOV _t13 _s3
	SUB _t14 j 1
	LOAD _t15 grid (_t13, _t14)
	ADD _t12 neighbors _t15
	MOV neighbors _t12
	ENDTHEN
else1: 	SUB _s3 i 1
	ENDELSE
endif1: 	ENDIF
	MOV _t17 _s3
	LOAD _t18 grid (_t17, j)
	ADD _t16 neighbors _t18
	MOV neighbors _t16
	IF cond2 then2 else2 endif2
cond2: 	LT _s2 j size_j
	MOV _t19 _s2
	TEST _t19
then2: 	MOV _t21 _s3
	ADD _s4 j 1
	MOV _t22 _s4
	LOAD _t23 grid (_t21, _t22)
	ADD _t20 neighbors _t23
	MOV neighbors _t20
	ENDTHEN
else2: 	ADD _s4 j 1
	ENDELSE
endif2: 	ENDIF
	ENDTHEN
step4: 	MOV _t9 _s4
	MOV j _t9
endloop4: 	ENDLOOP
	ENDBODY
step3: 	MOV _t7 _s0
	MOV i _t7
endloop3: 	ENDLOOP
	LOOP init5 cond5 body5 step5 endloop5
init5: 	MOV i 1
cond5: 	GT _t51 i size_i
	TEST _t51
body5: 	LOOP init6 cond6 body6 step6 endloop6
init6: 	MOV j 1
cond6: 	GT _t53 j size_j
	TEST _t53
body6: 	LOAD _t55 new_grid (i, j)
	STORE grid (i, j) _t55
	ENDBODY
step6: 	ADD _t54 j 1
	MOV j _t54
endloop6: 	ENDLOOP
	ENDBODY
step5: 	ADD _t52 i 1
	MOV i _t52
endloop5: 	ENDLOOP
	ENDBODY
step2: 	ADD _t5 gen 1
	MOV gen _t5
endloop2: 	ENDLOOP
	MOV alive_cells 0
	LOOP init7 cond7 body7 step7 endloop7
init7: 	MOV i 1
cond7: 	GT _t56 i size_i
	TEST _t56
body7: 	LOOP init8 cond8 body8 step8 endloop8
init8: 	MOV j 1
cond8: 	GT _t58 j size_j
	TEST _t58
body8: 	LOAD _t61 grid (i, j)
	ADD _t60 alive_cells _t61
	MOV alive_cells _t60
	ENDBODY
step8: 	ADD _t59 j 1
	MOV j _t59
endloop8: 	ENDLOOP
	ENDBODY
step7: 	ADD _t57 i 1
	MOV i _t57
endloop7: 	ENDLOOP
	CALL PRINT $str1
	CALL PRINT generations
	CALL PRINT $str2
	CALL PRINT $str3
	CALL PRINT alive_cells
