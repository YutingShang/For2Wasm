# Adapted from https://github.com/google/googletest/blob/release-1.8.1/googletest/make/Makefile

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make -f run_tests.mk all - makes everything.
#   make -f run_tests.mk TARGET - makes the given target.
#   make -f run_tests.mk cleantest  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

include definitions.mk
# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(THIRD_PARTY_DIR)/googletest/googletest

# Where to find user code.
TEST_SRC_DIR = ./tests
TEST_BUILD_DIR = $(BUILD_DIR)/tests

# Objects will be removed automatically by Make "Removing intermediate files"
TEST_OBJS_DIR = $(TEST_BUILD_DIR)/obj
TEST_TARGETS_DIR = $(TEST_BUILD_DIR)/bin

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list. [EDIT]
TEST_SRCS = $(wildcard $(TEST_SRC_DIR)/*_unittest.cc)
vpath %.cc $(TEST_SRC_DIR)
TEST_OBJS = $(patsubst %.cc, $(TEST_OBJS_DIR)/%.o, $(notdir $(TEST_SRCS)))

# Create a single test executable
TEST_EXECUTABLE = $(TEST_TARGETS_DIR)/all_tests

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++17 -g -Wall -Wextra -pthread


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TEST_EXECUTABLE)
	@echo "Running all tests"
	@$(TEST_EXECUTABLE)

cleantest :
	rm -rf $(TEST_BUILD_DIR) $(GTEST_BUILD_DIR)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.

# Define a directory for Google Test build artifacts
GTEST_BUILD_DIR = $(GENERATED_DIR)/gtest

# Ensure the build directory exists
$(GTEST_BUILD_DIR):
	mkdir -p $(GTEST_BUILD_DIR)

# Update the targets to use the new build directory
$(GTEST_BUILD_DIR)/gtest-all.o : $(GTEST_SRCS_) | $(GTEST_BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(GTEST_BUILD_DIR)/gtest_main.o : $(GTEST_SRCS_) | $(GTEST_BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(GTEST_BUILD_DIR)/gtest.a : $(GTEST_BUILD_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(GTEST_BUILD_DIR)/gtest_main.a : $(GTEST_BUILD_DIR)/gtest-all.o $(GTEST_BUILD_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TEST_EXECUTABLE) : $(TEST_OBJS) $(GTEST_BUILD_DIR)/gtest_main.a | $(TEST_TARGETS_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread -o $@ $^

$(TEST_TARGETS_DIR) :
	mkdir -p $(TEST_TARGETS_DIR)

$(TEST_OBJS_DIR)/%.o : $(TEST_SRC_DIR)/%.cc $(GTEST_HEADERS) | $(TEST_OBJS_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(TEST_OBJS_DIR) :
	mkdir -p $(TEST_OBJS_DIR)

.PHONY: all cleantest