#pragma once

#include "BasicBlock.h"
#include <set>
#include <unordered_map>



// a static class for common functionality for dataflow analyses
class AnalysisTools {

    public:

        // constructor 
        AnalysisTools() = delete;

        //returns a vector of all the basic blocks in the flowgraph
        //uses BFS to get the basic blocks roughly in flowgraph order, starting from the entry basic block
        static std::vector<BasicBlock*> getBasicBlocks(BasicBlock* entryBasicBlock);

        //returns the universe of all expressions in the program
        static std::set<std::string> getAllProgramExpressions(BaseNode* entryNode);

        //returns the set of expressions Ex that are killed by the node (specific to a program)
        static std::set<std::string> getKilledExpressionsAtNode(BaseNode* node, std::set<std::string> &allExpressions);

        //returns the set of definitions in a program
        //definitions in a program is a dictionary of {var: [list of definition points (i.e. nodes)]}, since a variable can have multiple definitions at different nodes
        // static std::unordered_map<std::string, std::set<BaseNode*>> getAllProgramDefinitionPoints(BaseNode* entryNode);

        // returns the set of ACTUAL STRING definitions at a node
        // either the generated expressions for an ExpressionNode, or the src for a MovNode
        static std::set<std::string> getDefinitionsAtNode(BaseNode* node);

        // returns the set of all copy statements (i.e. from MovNodes) in a program
        // copy statements are a tuple of (src, dst)
        static std::set<std::pair<std::string, std::string>> getAllProgramCopyStatements(BaseNode* entryNode);

        // returns the set of all copy statements (i.e. from MovNodes) killed by a node (which defines a variable, e.g. including ExpressionNodes)
        static std::set<std::pair<std::string, std::string>> getKilledCopyStatementsAtNode(BaseNode* node, std::set<std::pair<std::string, std::string>> &allCopyStatements);

        // returns the set of all copy statements (i.e. from MovNodes) generated by a (Mov) node
        static std::set<std::pair<std::string, std::string>> getGeneratedCopyStatementsAtNode(BaseNode* node);

        // returns the set of all generated expressions at a node (those expressions which are used/referenced and NOT immediately killed defined)
        static std::set<std::string> getGeneratedExpressionsAtNode(BaseNode* node);

        // returns the set of all earliest expressions in a flowgraph
        // calculate the earliest expressions for all nodes in the flowgraph using VBE and AVAIL
        ///NOTE: could overload this with different signatures for if you have already calculated the VBE and AVAIL results
        static std::unordered_map<BaseNode*, std::set<std::string>> getAllNodesEarliestExpressions(BasicBlock* entryBasicBlock);

        // returns the set of all latest expressions in a flowgraph
        // Need allExpressions of the program to get the complementation
        // Need to pass in the basic blocks of the flowgraph in order to find successors of each node
        static std::unordered_map<BaseNode*, std::set<std::string>> getAllNodesLatestExpressions(BasicBlock* entryBasicBlock, std::set<std::string> allExpressions, std::vector<BasicBlock*> basicBlocks);

        // returns a map of all flowgraph nodes to their corresponding basic blocks
        // in order for fast lookup of the basic block of a node
        static std::unordered_map<BaseNode*, BasicBlock*> getFlowgraphNodeToBasicBlockMap(std::vector<BasicBlock*> basicBlocks);

        // returns the set of all successor nodes of a node (either just 1 if SimpleNode, or get from successor basic blocks otherwise)
        static std::vector<BaseNode*> getSuccessorNodes(BaseNode* node, BasicBlock* currentBasicBlock);

};